<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>
typedef struct
{
    int id;
    int lane;
    int direction;
    bool isCrossing;
    bool wait_for_retry;
    bool isWaiting;
    bool isApproaching;
} car;

clock  clk, clk1, clk2, clk3;
clock manager_clk;
chan request, grant, retry, dataReady, leave, stopWaiting;
bool conflict;


bool hasGrantedSlot; 




int data_lane = 0; // current lane
int data_direction = 0; // target
int data_veh_id = 0; 




int route[2][2]; // 2 lane, each lane has 2 route .....make sense? 

void check_conflict() // the logic is not well planned
{    
    if( route[data_lane][data_direction] != 1){
       route[data_lane][data_direction] = 1;
        conflict = false;
    }
    else{
        conflict = true;
    }
}



void send_data(car veh)
{
    data_lane = veh.lane;
    data_direction = veh.direction;
    data_veh_id = veh.id; 
}

void clear_request(car veh){
    route[veh.lane][veh.direction] = 0;
}


car veh1 = {1,0,1, false, false, false, false};
car veh2 = {2,0,1, false, false,false, false};
car veh3 = {3,0,1, false, false, false, false};</declaration>
	<template>
		<name>Obs1</name>
		<parameter>car &amp;veh1, car &amp;veh2</parameter>
		<location id="id0" x="-996" y="-296">
		</location>
		<location id="id1" x="-644" y="-297">
			<name x="-654" y="-331">Error</name>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-932" y="-348">veh1.isCrossing and 
veh2.isCrossing</label>
		</transition>
	</template>
	<template>
		<name>Obs2</name>
		<location id="id3" x="-864" y="-234">
		</location>
		<location id="id4" x="-512" y="-235">
			<name x="-522" y="-269">Error</name>
		</location>
		<init ref="id3"/>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-800" y="-286">hasGrantedSlot and 
manager_clk &lt; 1</label>
		</transition>
	</template>
	<template>
		<name>Obs3</name>
		<location id="id6" x="-803" y="-364">
		</location>
		<location id="id7" x="-519" y="-367">
			<name x="-529" y="-401">Error</name>
		</location>
		<location id="id8" x="-520" y="-178">
		</location>
		<init ref="id6"/>
		<transition id="id9">
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-780" y="-268">data_veh_id != 0</label>
			<nail x="-669" y="-279"/>
		</transition>
		<transition id="id10">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-519" y="-306">data_veh_id == 0</label>
		</transition>
		<transition id="id11">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-785" y="-400">hasGrantedSlot</label>
		</transition>
	</template>
	<template>
		<name>Obs4</name>
		<parameter>car &amp;veh1, clock &amp;vehi_clk_v</parameter>
		<declaration>clock x;</declaration>
		<location id="id12" x="-630" y="-275">
		</location>
		<location id="id13" x="-914" y="-272">
		</location>
		<location id="id14" x="-631" y="-86">
			<name x="-634" y="-66">Error</name>
		</location>
		<init ref="id13"/>
		<transition id="id15">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-861" y="-182">vehi_clk_v&lt;=10</label>
			<nail x="-780" y="-187"/>
		</transition>
		<transition id="id16">
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="guard" x="-612" y="-257">vehi_clk_v&gt;=10 and 
veh1.wait_for_retry</label>
		</transition>
		<transition id="id17">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-857" y="-299">veh1.wait_for_retry</label>
			<label kind="assignment" x="-784" y="-272">x:=0</label>
		</transition>
	</template>
	<template>
		<name>Obs4Alt</name>
		<parameter>car &amp;veh1, clock &amp;vehi_clk_v</parameter>
		<declaration>clock x;</declaration>
		<location id="id18" x="-85" y="-279">
			<label kind="invariant" x="-95" y="-262">x&lt;=10</label>
		</location>
		<location id="id19" x="-369" y="-276">
		</location>
		<location id="id20" x="-86" y="-90">
			<name x="-96" y="-124">Error</name>
		</location>
		<init ref="id19"/>
		<transition id="id21">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-246" y="-186">stopWaiting?</label>
			<nail x="-235" y="-191"/>
		</transition>
		<transition id="id22">
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="guard" x="-85" y="-218">x&gt;=10</label>
		</transition>
		<transition id="id23">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-312" y="-303">veh1.wait_for_retry</label>
			<label kind="assignment" x="-239" y="-276">x:=0</label>
		</transition>
	</template>
	<template>
		<name>Obs5</name>
		<parameter>car &amp;veh1, car &amp;veh2</parameter>
		<location id="id24" x="-964" y="-599">
		</location>
		<location id="id25" x="-1358" y="-601">
		</location>
		<location id="id26" x="-965" y="-410">
			<name x="-905" y="-429">Error</name>
		</location>
		<init ref="id25"/>
		<transition id="id27">
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="guard" x="-1155" y="-451">veh1.isCrossing</label>
			<nail x="-1119" y="-464"/>
		</transition>
		<transition id="id28">
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="guard" x="-1208" y="-565">veh1.isCrossing</label>
			<nail x="-1114" y="-511"/>
		</transition>
		<transition id="id29">
			<source ref="id24"/>
			<target ref="id26"/>
			<label kind="guard" x="-964" y="-538">veh1.isCrossing and veh2.isCrossing</label>
		</transition>
		<transition id="id30">
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="-1288" y="-625">veh1.isWaiting and veh2.isWaiting</label>
		</transition>
	</template>
	<template>
		<name>Obs6</name>
		<parameter>car &amp;veh1, clock &amp;vehi_clk_v</parameter>
		<location id="id31" x="-688" y="-359">
		</location>
		<location id="id32" x="-1082" y="-361">
		</location>
		<location id="id33" x="-689" y="-170">
			<name x="-629" y="-189">Error</name>
		</location>
		<init ref="id32"/>
		<transition id="id34">
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-924" y="-213">veh1.isApproaching</label>
			<nail x="-843" y="-224"/>
		</transition>
		<transition id="id35">
			<source ref="id31"/>
			<target ref="id33"/>
			<label kind="guard" x="-688" y="-298">!veh1.isApproaching</label>
		</transition>
		<transition id="id36">
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="guard" x="-1045" y="-391">veh1.wait_for_retry and vehi_clk_v&gt;=10</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">vehicle</name>
		<parameter>car &amp;veh, clock &amp;clk_v</parameter>
		<declaration>// Place local declarations here.
bool has_waited = false;
bool was_granted_access = false;</declaration>
		<location id="id37" x="-537" y="-75">
			<name x="-588" y="-118">Approaching</name>
		</location>
		<location id="id38" x="-72" y="-76">
			<name x="-82" y="-110">wait</name>
		</location>
		<location id="id39" x="95" y="-76">
			<name x="85" y="-110">cross</name>
		</location>
		<location id="id40" x="-317" y="-76">
			<name x="-343" y="-110">send_request</name>
		</location>
		<location id="id41" x="365" y="-76">
			<name x="355" y="-110">exit</name>
		</location>
		<location id="id42" x="-266" y="59">
			<name x="-309" y="76">wait_retry</name>
			<label kind="invariant" x="-299" y="108">clk_v&lt;=5</label>
		</location>
		<init ref="id37"/>
		<transition id="id43">
			<source ref="id42"/>
			<target ref="id37"/>
			<label kind="guard" x="-524" y="12">clk_v &gt;= 5</label>
			<label kind="synchronisation" x="-539" y="-20">stopWaiting!</label>
			<label kind="assignment" x="-578" y="36">veh.wait_for_retry=false, 
clk_v:=0, 
veh.isApproaching=true</label>
		</transition>
		<transition id="id44">
			<source ref="id38"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-127" y="-17">retry?</label>
			<label kind="assignment" x="-199" y="31">clk_v:=0,
veh.wait_for_retry=true,
veh.isWaiting=false</label>
		</transition>
		<transition id="id45">
			<source ref="id39"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="138" y="-102">leave!</label>
			<label kind="assignment" x="162" y="-53">clear_request(veh), 
veh.isCrossing=false</label>
		</transition>
		<transition id="id46">
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="-42" y="-102">grant?</label>
			<label kind="assignment" x="-68" y="-66">has_waited:=true,
was_granted_access=true, 
veh.isCrossing=true, 
veh.isWaiting=true</label>
		</transition>
		<transition id="id47">
			<source ref="id40"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-218" y="-60">dataReady!</label>
			<label kind="assignment" x="-270" y="-76">veh.isWaiting:=true</label>
		</transition>
		<transition id="id48">
			<source ref="id37"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-482" y="-115">request!</label>
			<label kind="assignment" x="-430" y="-67">send_data(veh),
veh.isApproaching=false</label>
		</transition>
	</template>
	<template>
		<name>intersection_manager</name>
		<parameter>clock &amp;clk</parameter>
		<location id="id49" x="-841" y="-272">
			<name x="-901" y="-280">idle</name>
		</location>
		<location id="id50" x="-493" y="-272">
			<name x="-459" y="-280">checkConflicts</name>
		</location>
		<location id="id51" x="-663" y="-119">
			<name x="-697" y="-93">grantSlot</name>
			<label kind="invariant" x="-747" y="-115">clk&lt;=1</label>
		</location>
		<location id="id52" x="-671" y="-416">
			<name x="-697" y="-459">sendRetry</name>
		</location>
		<location id="id53" x="-689" y="-272">
			<name x="-706" y="-314">wait</name>
		</location>
		<location id="id54" x="-977" y="-272">
			<name x="-1045" y="-280">reset</name>
		</location>
		<location id="id55" x="-802" y="-165">
			<name x="-812" y="-199">SlotGranted</name>
			<committed/>
		</location>
		<init ref="id49"/>
		<transition id="id56">
			<source ref="id51"/>
			<target ref="id55"/>
			<label kind="guard" x="-814" y="-127">clk&gt;=1</label>
			<label kind="assignment" x="-910" y="-107">hasGrantedSlot=true</label>
		</transition>
		<transition id="id57">
			<source ref="id54"/>
			<target ref="id49"/>
			<nail x="-909" y="-221"/>
		</transition>
		<transition id="id58">
			<source ref="id49"/>
			<target ref="id54"/>
			<label kind="synchronisation" x="-943" y="-340">leave?</label>
			<nail x="-909" y="-314"/>
		</transition>
		<transition id="id59">
			<source ref="id53"/>
			<target ref="id50"/>
			<label kind="synchronisation" x="-654" y="-297">dataReady?</label>
			<label kind="assignment" x="-670" y="-272">check_conflict()</label>
		</transition>
		<transition id="id60">
			<source ref="id52"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-816" y="-374">retry!</label>
		</transition>
		<transition id="id61">
			<source ref="id50"/>
			<target ref="id52"/>
			<label kind="guard" x="-586" y="-382">conflict == true</label>
		</transition>
		<transition id="id62">
			<source ref="id50"/>
			<target ref="id51"/>
			<label kind="guard" x="-578" y="-170">conflict == false</label>
			<label kind="assignment" x="-561" y="-194">clk:=0</label>
		</transition>
		<transition id="id63">
			<source ref="id55"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-882" y="-205">grant!</label>
			<label kind="assignment" x="-992" y="-189">hasGrantedSlot=false</label>
		</transition>
		<transition id="id64">
			<source ref="id49"/>
			<target ref="id53"/>
			<label kind="synchronisation" x="-799" y="-306">request?</label>
			<nail x="-773" y="-272"/>
		</transition>
	</template>
	<system>
vehi1 = vehicle(veh1, clk1);
vehi2 = vehicle(veh2, clk2);
vehi3 = vehicle(veh3, clk3);
manager = intersection_manager(manager_clk);


obs1 = Obs1(veh1, veh2);
obs2 = Obs2();
obs3 = Obs3();
obs4 = Obs4(veh1, clk1);
obs4alt = Obs4Alt(veh1, clk1);
obs5 = Obs5(veh1, veh2);
obs6 = Obs6(veh1, clk1);
system vehi1, vehi2, vehi3, manager, obs1, obs2, obs3,obs4,obs4alt, obs5, obs6;</system>
	<queries>
		<query>
			<formula>A[] not obs1.Error</formula>
			<comment>Social Expectation: The manager must never grant access to the same route to two different vehicles simultaneously. This is the fundamental safety property of the intersection.</comment>
			<result outcome="success" type="quality" timestamp="2025-06-20 22:33:55 +0200">
			</result>
		</query>
		<query>
			<formula>A[] not obs2.Error</formula>
			<comment>The manager shouldn't rapidly grant and then revoke access, or send conflicting signals. This creates confusion and hesitant, unsafe driving.</comment>
			<result outcome="success" type="quality" timestamp="2025-06-20 22:33:55 +0200">
			</result>
		</query>
		<query>
			<formula>A[] not obs3.Error</formula>
			<comment>The manager should not grant access to a vehicle that hasn't requested it. This prevents spurious or ghost grants.</comment>
			<result outcome="success" type="quality" timestamp="2025-06-20 22:33:55 +0200">
			</result>
		</query>
		<query>
			<formula>A[] not obs4.Error</formula>
			<comment>The 10-second back-off period should be respected. A vehicle shouldn't decide to wait even longer.</comment>
			<result outcome="success" type="quality" timestamp="2025-06-20 22:33:55 +0200">
			</result>
		</query>
		<query>
			<formula>A[] not obs4alt.Error</formula>
			<comment>alternative way of doing it</comment>
			<result outcome="success" type="quality" timestamp="2025-06-20 22:33:55 +0200">
			</result>
		</query>
		<query>
			<formula>A[] not obs5.Error</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-06-20 22:33:55 +0200">
			</result>
		</query>
		<query>
			<formula>A[] not obs6.Error</formula>
			<comment>Social Expectation: After the back-off period is over, a vehicle should promptly re-submit its request to not waste time.

A[] (vehi1.wait_retry and vehi1.clk_v &gt;= 10) imply A&lt;&gt; vehi1.Approaching</comment>
			<result outcome="success" type="quality" timestamp="2025-06-20 22:33:55 +0200">
			</result>
		</query>
	</queries>
</nta>
